name: Build pysqlite3 (SQLite WAL2) wheels

on:
  workflow_dispatch:
  push:
    tags:
      - wheels-*

env:
  # WAL2 source to build from. Use a specific SHA or keep "wal2" to follow the branch tip.
  SQLITE_WAL2_BRANCH: "trunk"

  # Bump this if you change the flag set below — it invalidates the prep cache.
  FLAGS_REV: "v1"

  # Version of coleifer/pysqlite3 to build wheels for.
  PYSQLITE3_VERSION: "0.5.4"

  # Mild optimization flags for POSIX builds (feature flags are injected in the amalgamation itself).
  POSIX_BASE_CFLAGS: "-O3 -fPIC -DNDEBUG"

jobs:
  prep-sqlite-amalgamation:
    name: Prepare SQLite WAL2 (pinned) + nan-inf merge
    runs-on: ubuntu-latest
    env:
      WAL2_PIN: "db44f17a84"     # WAL2 pin near Mar 24, 2023
      NANINF_SHA: "96ec830645"   # nan-inf feature check-in (ENABLE_NAN_INF)
      FLAGS_REV: "v3"            # bump to invalidate cache when flags change
    steps:
      - name: Install prerequisites
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y fossil tcl build-essential
  
      - name: Clone & open SQLite repo
        run: |
          set -euxo pipefail
          mkdir sqlite-src && cd sqlite-src
          fossil clone https://sqlite.org/src sqlite.fossil
          mkdir repo && cd repo
          fossil open ../sqlite.fossil
  
      - name: Merge WAL2 pin (base) <- nan-inf (reverse direction)
        id: merge
        run: |
          set -euxo pipefail
          cd sqlite-src/repo
          fossil update "${WAL2_PIN}"           # base = WAL2
          BASE_SHA=$(fossil info | awk '/^checkout:/ {print $2}')
          fossil merge "${NANINF_SHA}"          # merge nan-inf into WAL2
          echo "wal2_sha=$BASE_SHA"   >> "$GITHUB_OUTPUT"
          echo "naninf_sha=${NANINF_SHA}" >> "$GITHUB_OUTPUT"
          if grep -R "BEGIN MERGE CONFLICT" -n .; then
            echo "Merge conflicts detected (reverse direction). Try another WAL2 pin." >&2
            exit 1
          fi
  
      - name: Restore amalgamation cache
        id: cache-amalg
        uses: actions/cache@v4
        with:
          path: sqlite-src/out
          key: sqlite-merge-wal2-${{ steps.merge.outputs.wal2_sha }}-naninf-${{ steps.merge.outputs.naninf_sha }}-${{ env.FLAGS_REV }}
  
      - name: Configure & build amalgamation (sqlite3.c / sqlite3.h)
        if: steps.cache-amalg.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cd sqlite-src/repo
          ./configure
          make sqlite3.c sqlite3.h
          cp tsrc/sqlite3ext.h . || cp src/sqlite3ext.h .
          mkdir -p ../out
          cp sqlite3.c sqlite3.h sqlite3ext.h ../out/
          {
            echo "WAL2_SHA=${{ steps.merge.outputs.wal2_sha }}"
            echo "NANINF_SHA=${{ steps.merge.outputs.naninf_sha }}"
          } > ../out/MERGE_BASE.txt
  
      - name: Prepend compile flags into sqlite3.c
        run: |
          set -euxo pipefail
          f=sqlite-src/out/sqlite3.c
          test -f "$f"
          tmp=$(mktemp)
          {
            echo '#define NDEBUG 1'
            echo '#define SQLITE_ENABLE_NAN_INF 1'
            echo '#define SQLITE_ENABLE_JSON_NAN_INF 1'
            echo '#define SQLITE_ENABLE_JSON1 1'
            echo '#define SQLITE_ENABLE_FTS5 1'
            echo '#define SQLITE_ENABLE_RTREE 1'
            echo '#define SQLITE_ENABLE_STAT4 1'
            echo '#define SQLITE_ENABLE_MATH_FUNCTIONS 1'
            echo '#define SQLITE_ENABLE_NORMALIZE 1'
            echo '#define SQLITE_ENABLE_DESERIALIZE 1'
            echo '#define SQLITE_ENABLE_DBPAGE_VTAB 1'
            echo '#define SQLITE_ENABLE_DBSTAT_VTAB 1'
            echo '#define SQLITE_ENABLE_STMTVTAB 1'
            echo '#define SQLITE_ENABLE_COLUMN_METADATA 1'
            echo '#define SQLITE_LIKE_DOESNT_MATCH_BLOBS 1'
            echo '#define SQLITE_DEFAULT_MEMSTATUS 0'
            echo '#define SQLITE_THREADSAFE 2'
            echo '#define SQLITE_OMIT_DEPRECATED 1'
            cat "$f"
          } > "$tmp"
          mv "$tmp" "$f"
          head -n 20 "$f"
  
      - uses: actions/upload-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: sqlite-src/out/*


  # ---------- Linux manylinux ----------
  linux-manylinux-x86_64:
    name: Linux manylinux wheels (cp39–cp312, x86_64)
    needs: prep-sqlite-amalgamation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/setup.cfg') }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/cibuildwheel
          key: cibw-${{ runner.os }}
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: amalgamation
      - name: Clone pysqlite3 and vendor amalgamation
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${PYSQLITE3_VERSION}" https://github.com/coleifer/pysqlite3.git pysqlite3-src
          cp amalgamation/sqlite3.c pysqlite3-src/
          cp amalgamation/sqlite3.h pysqlite3-src/
          cp amalgamation/sqlite3ext.h pysqlite3-src/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install -U pip cibuildwheel==2.*
      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-manylinux_* cp310-manylinux_* cp311-manylinux_* cp312-manylinux_*"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_BEFORE_BUILD: "python -m pip install -U setuptools wheel && cd {package} && python setup.py build_static"
          CIBW_ENVIRONMENT_LINUX: 'CFLAGS="${{ env.POSIX_BASE_CFLAGS }}" CPPFLAGS="$CFLAGS"'
          CIBW_BUILD_VERBOSITY: "1"
        run: python -m cibuildwheel pysqlite3-src --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-manylinux-x86_64
          path: wheelhouse/*.whl

  linux-manylinux-aarch64:
    name: Linux manylinux wheels (cp39–cp312, aarch64 • native)
    needs: prep-sqlite-amalgamation
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/setup.cfg') }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/cibuildwheel
          key: cibw-${{ runner.os }}
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: amalgamation
      - name: Clone pysqlite3 and vendor amalgamation
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${PYSQLITE3_VERSION}" https://github.com/coleifer/pysqlite3.git pysqlite3-src
          cp amalgamation/sqlite3.c pysqlite3-src/
          cp amalgamation/sqlite3.h pysqlite3-src/
          cp amalgamation/sqlite3ext.h pysqlite3-src/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install -U pip cibuildwheel==2.*
      - name: Build wheels (native arm64)
        env:
          CIBW_BUILD: "cp39-manylinux_* cp310-manylinux_* cp311-manylinux_* cp312-manylinux_*"
          CIBW_ARCHS_LINUX: "aarch64"
          CIBW_BEFORE_BUILD: "python -m pip install -U setuptools wheel && cd {package} && python setup.py build_static"
          CIBW_ENVIRONMENT_LINUX: 'CFLAGS="${{ env.POSIX_BASE_CFLAGS }}" CPPFLAGS="$CFLAGS"'
          CIBW_BUILD_VERBOSITY: "1"
        run: python -m cibuildwheel pysqlite3-src --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-manylinux-aarch64
          path: wheelhouse/*.whl

  # ---------- Linux musllinux ----------
  linux-musllinux-x86_64:
    name: Linux musllinux wheels (cp39–cp312, x86_64)
    needs: prep-sqlite-amalgamation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/setup.cfg') }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/cibuildwheel
          key: cibw-${{ runner.os }}
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: amalgamation
      - name: Clone pysqlite3 and vendor amalgamation
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${PYSQLITE3_VERSION}" https://github.com/coleifer/pysqlite3.git pysqlite3-src
          cp amalgamation/sqlite3.c pysqlite3-src/
          cp amalgamation/sqlite3.h pysqlite3-src/
          cp amalgamation/sqlite3ext.h pysqlite3-src/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install -U pip cibuildwheel==2.*
      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-musllinux_* cp310-musllinux_* cp311-musllinux_* cp312-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_BEFORE_BUILD: "python -m pip install -U setuptools wheel && cd {package} && python setup.py build_static"
          CIBW_ENVIRONMENT_LINUX: 'CFLAGS="${{ env.POSIX_BASE_CFLAGS }}" CPPFLAGS="$CFLAGS"'
          CIBW_BUILD_VERBOSITY: "1"
        run: python -m cibuildwheel pysqlite3-src --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-musllinux-x86_64
          path: wheelhouse/*.whl

  linux-musllinux-aarch64:
    name: Linux musllinux wheels (cp39–cp312, aarch64 • native)
    needs: prep-sqlite-amalgamation
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/setup.cfg') }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/cibuildwheel
          key: cibw-${{ runner.os }}
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: amalgamation
      - name: Clone pysqlite3 and vendor amalgamation
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${PYSQLITE3_VERSION}" https://github.com/coleifer/pysqlite3.git pysqlite3-src
          cp amalgamation/sqlite3.c pysqlite3-src/
          cp amalgamation/sqlite3.h pysqlite3-src/
          cp amalgamation/sqlite3ext.h pysqlite3-src/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install -U pip cibuildwheel==2.*
      - name: Build wheels (native arm64)
        env:
          CIBW_BUILD: "cp39-musllinux_* cp310-musllinux_* cp311-musllinux_* cp312-musllinux_*"
          CIBW_ARCHS_LINUX: "aarch64"
          CIBW_BEFORE_BUILD: "python -m pip install -U setuptools wheel && cd {package} && python setup.py build_static"
          CIBW_ENVIRONMENT_LINUX: 'CFLAGS="${{ env.POSIX_BASE_CFLAGS }}" CPPFLAGS="$CFLAGS"'
          CIBW_BUILD_VERBOSITY: "1"
        run: python -m cibuildwheel pysqlite3-src --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-musllinux-aarch64
          path: wheelhouse/*.whl

  # ---------- macOS ----------
  macos-x86_64:
    name: macOS x86_64 wheels (cp39–cp312)
    needs: prep-sqlite-amalgamation
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: amalgamation
      - name: Clone pysqlite3 and vendor amalgamation
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${PYSQLITE3_VERSION}" https://github.com/coleifer/pysqlite3.git pysqlite3-src
          cp amalgamation/sqlite3.c pysqlite3-src/
          cp amalgamation/sqlite3.h pysqlite3-src/
          cp amalgamation/sqlite3ext.h pysqlite3-src/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install -U pip cibuildwheel==2.*
      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-macosx_* cp310-macosx_* cp311-macosx_* cp312-macosx_*"
          CIBW_ARCHS_MACOS: "x86_64"
          CIBW_BEFORE_BUILD: "python -m pip install -U setuptools wheel && cd {package} && python setup.py build_static"
          CIBW_ENVIRONMENT_MACOS: 'MACOSX_DEPLOYMENT_TARGET=10.13 CFLAGS="${{ env.POSIX_BASE_CFLAGS }}" CPPFLAGS="$CFLAGS"'
          CIBW_BUILD_VERBOSITY: "1"
        run: python -m cibuildwheel pysqlite3-src --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64
          path: wheelhouse/*.whl

  macos-arm64:
    name: macOS arm64 wheels (cp39–cp312)
    needs: prep-sqlite-amalgamation
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: amalgamation
      - name: Clone pysqlite3 and vendor amalgamation
        run: |
          set -euxo pipefail
          git clone --depth 1 --branch "${PYSQLITE3_VERSION}" https://github.com/coleifer/pysqlite3.git pysqlite3-src
          cp amalgamation/sqlite3.c pysqlite3-src/
          cp amalgamation/sqlite3.h pysqlite3-src/
          cp amalgamation/sqlite3ext.h pysqlite3-src/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install -U pip cibuildwheel==2.*
      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-macosx_* cp310-macosx_* cp311-macosx_* cp312-macosx_*"
          CIBW_ARCHS_MACOS: "arm64"
          CIBW_BEFORE_BUILD: "python -m pip install -U setuptools wheel && cd {package} && python setup.py build_static"
          CIBW_ENVIRONMENT_MACOS: 'MACOSX_DEPLOYMENT_TARGET=11.0 CFLAGS="${{ env.POSIX_BASE_CFLAGS }}" CPPFLAGS="$CFLAGS"'
          CIBW_BUILD_VERBOSITY: "1"
        run: python -m cibuildwheel pysqlite3-src --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-arm64
          path: wheelhouse/*.whl

  # ---------- Windows ----------
  windows-amd64:
    name: Windows amd64 wheels (cp39–cp312)
    needs: prep-sqlite-amalgamation
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-wal2-amalgamation
          path: amalgamation
      - name: Clone pysqlite3 and vendor amalgamation
        shell: pwsh
        run: |
          git clone --depth 1 --branch $env:PYSQLITE3_VERSION https://github.com/coleifer/pysqlite3.git pysqlite3-src
          Copy-Item amalgamation\sqlite3.c pysqlite3-src\
          Copy-Item amalgamation\sqlite3.h pysqlite3-src\
          Copy-Item amalgamation\sqlite3ext.h pysqlite3-src\
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: python -m pip install -U pip cibuildwheel==2.*
      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-win_amd64 cp310-win_amd64 cp311-win_amd64 cp312-win_amd64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install -U setuptools wheel && cd {package} && python setup.py build_static"
          CIBW_BUILD_VERBOSITY: "1"
        run: python -m cibuildwheel pysqlite3-src --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-amd64
          path: wheelhouse\*.whl

  # ---------- Gather ----------
  gather:
    name: Gather all wheels
    needs:
      - linux-manylinux-x86_64
      - linux-manylinux-aarch64
      - linux-musllinux-x86_64
      - linux-musllinux-aarch64
      - macos-x86_64
      - macos-arm64
      - windows-amd64
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get update && sudo apt-get install -y zip
      - uses: actions/download-artifact@v4
        with:
          path: wheelhouse_all
      - run: ls -R wheelhouse_all
      - run: |
          cd wheelhouse_all
          zip -r ../pysqlite3-wal2-wheels.zip .
      - uses: actions/upload-artifact@v4
        with:
          name: pysqlite3-wal2-wheels-all
          path: pysqlite3-wal2-wheels.zip
